name: CI Pipeline Client

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./client
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Run Super Linter
        uses: github/super-linter@v5
        env:
          VALIDATE_ALL_CODEBASE: true
          VALIDATE_JS: true
          GITHUB_TOKEN: ${{ secrets.PAT_GITHUB }}

  build:
    name: Build Application
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./client
    needs: lint
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Build the project
        run: npm run build

  sonarcloud:
    name: SonarCloud Quality Gate
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Java for SonarCloud
        uses: actions/setup-java@v3
        with:
          java-version: '11'

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_GITHUB }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: ./client
          args: >
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.host.url=${{ secrets.SONAR_URL }}
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
            -Dsonar.sources=src/
            -Dsonar.verbose=true

  docker_build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: sonarcloud
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker image
        run: docker build -t myapp:latest .

  snyk_scan:
    name: Snyk Docker Image Scan
    runs-on: ubuntu-latest
    needs: docker_build
    steps:
      - name: Snyk Scan Docker Image
        uses: snyk/actions/docker@master
        with:
          image: myapp:latest
          dockerfile: ./Dockerfile
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  trivy_scan:
    name: Trivy Docker Image Scan
    runs-on: ubuntu-latest
    needs: snyk_scan
    steps:
      - name: Install Trivy
        run: |
          sudo apt-get install -y wget
          wget https://github.com/aquasecurity/trivy/releases/download/v0.29.2/trivy_0.29.2_Linux-64bit.deb
          sudo dpkg -i trivy_0.29.2_Linux-64bit.deb

      - name: Trivy Scan
        run: trivy image --severity HIGH,CRITICAL --exit-code 1 myapp:latest

  docker_push:
    name: Push Docker Image to ECR
    runs-on: ubuntu-latest
    needs: trivy_scan
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Tag Docker Image
        run: docker tag myapp:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/myapp:latest

      - name: Push Docker Image to ECR
        run: docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/myapp:latest
