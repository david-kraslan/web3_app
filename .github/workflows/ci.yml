name: Web3 CI

on:
  push:
    branches: "main"
  pull_request:
    branches: "main"

jobs:
  client-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./client
    strategy:
      matrix:
        node-version: [14.x]
        architecture: [x64]
    steps:
      - name: Check-out git repository  
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }} - ${{ matrix.architecture }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install project dependencies 
        run: |
          npm install
          npm install -D tailwindcss postcss autoprefixer
          npm install eslint
          npm install prettier
        env:
          CI: true
  
      - name: Build
        run: npm run build

      - name: Setup SonarQube
        uses: warchant/setup-sonar-scanner@v8

      - name: Analyze with SonarCloud
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_GITHUB }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: client
          args: >
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.host.url=${{ secrets.SONAR_URL }}
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
            -Dsonar.sources=src/
            -Dsonar.verbose=true
        
  smartcontract-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./smart_contract
    strategy:
      matrix:
        node-version: [14.x]
        architecture: [x64]
    steps:
      - name: Check-out git repository  
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }} - ${{ matrix.architecture }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install project dependencies 
        run: |
          npm install
          npm install --save-dev hardhat
          npx hardhat compile
        env:
          CI: true

      - name: Setup SonarQube
        uses: warchant/setup-sonar-scanner@v8

      - name: Analyze with SonarCloud
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_GITHUB }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: smart_contract
          args: >
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.host.url=${{ secrets.SONAR_URL }}
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
            -Dsonar.sources=.
            -Dsonar.verbose=true

      - name: Test smart contract 
        run: npx hardhat test
        env:
          CI: true
        continue-on-error: true                     

  client-security:
    needs: client-test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./client
    steps:
      - uses: actions/checkout@v4

      - name: Install Snyk CLI
        uses: snyk/actions/setup@master
        with:
          snyk-version: latest
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Snyk Authenticate    
        run: snyk auth ${{ secrets.SNYK_TOKEN }}

      - name: Snyk Code Test
        run: snyk code test --all-projects
        continue-on-error: true

  smartcontract-security:
    needs: smartcontract-test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./smart_contract
    steps:
      - uses: actions/checkout@v4

      - name: Install Snyk CLI
        uses: snyk/actions/setup@master
        with:
          snyk-version: latest
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Snyk Authenticate    
        run: snyk auth ${{ secrets.SNYK_TOKEN }}

      - name: Snyk Code Test
        run: snyk code test --all-projects
        continue-on-error: true

  client-image:
    needs: client-security
    runs-on: ubuntu-latest
    permissions:
      contents: read 
      security-events: write 
      actions: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@master

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker image
        working-directory: ./client
        run: |
          IMAGE_TAG=web3-client
          docker build -t ${{ secrets.ECR_REPOSITORY_NAME }}:$IMAGE_TAG .

      - name: Tag Docker image
        working-directory: ./client
        run: |
          ECR_URI=$(aws ecr describe-repositories --repository-names ${{ secrets.ECR_REPOSITORY_NAME }} --query "repositories[0].repositoryUri" --output text)
          IMAGE_TAG=web3-client
          docker tag ${{ secrets.ECR_REPOSITORY_NAME }}:$IMAGE_TAG $ECR_URI:$IMAGE_TAG

      - name: Push Docker image to Amazon ECR
        working-directory: ./client
        run: |
          ECR_URI=$(aws ecr describe-repositories --repository-names ${{ secrets.ECR_REPOSITORY_NAME }} --query "repositories[0].repositoryUri" --output text)
          IMAGE_TAG=web3-client
          docker push $ECR_URI:$IMAGE_TAG

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '376801182676.dkr.ecr.eu-north-1.amazonaws.com/${{ secrets.ECR_REPOSITORY_NAME }}:web3-client'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

  smartcontract-image:
    needs: smartcontract-security
    runs-on: ubuntu-latest
    permissions:
      contents: read 
      security-events: write 
      actions: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@master

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker image
        working-directory: ./smart_contract
        run: |
          IMAGE_TAG=web3-smartcontract
          docker build -t ${{ secrets.ECR_REPOSITORY_NAME }}:$IMAGE_TAG .

      - name: Tag Docker image
        working-directory: ./smart_contract
        run: |
          ECR_URI=$(aws ecr describe-repositories --repository-names ${{ secrets.ECR_REPOSITORY_NAME }} --query "repositories[0].repositoryUri" --output text)
          IMAGE_TAG=web3-smartcontract
          docker tag ${{ secrets.ECR_REPOSITORY_NAME }}:$IMAGE_TAG $ECR_URI:$IMAGE_TAG

      - name: Push Docker image to Amazon ECR
        working-directory: ./smart_contract
        run: |
          ECR_URI=$(aws ecr describe-repositories --repository-names ${{ secrets.ECR_REPOSITORY_NAME }} --query "repositories[0].repositoryUri" --output text)
          IMAGE_TAG=web3-smartcontract
          docker push $ECR_URI:$IMAGE_TAG

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '376801182676.dkr.ecr.eu-north-1.amazonaws.com/${{ secrets.ECR_REPOSITORY_NAME }}:web3-smartcontract'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

  k8s-manifest-scan:
    needs: [client-security, smartcontract-security]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master

      - name: Install Snyk CLI
        uses: snyk/actions/setup@master
        with:
          snyk-version: latest
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Snyk Authenticate    
        run: snyk auth ${{ secrets.SNYK_TOKEN }}

      - name: Run Snyk to check Kubernetes manifest file for issues
        run: snyk iac test k8s_manifests/
        continue-on-error: true
